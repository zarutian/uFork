#
# Lambda Calculus (pure-function evaluator)
#

# Constant values do not depend on the environment.

DEF constant(value) AS \(cust, _).[ SEND value TO cust ]

# Variables represent values in an expression
# that are dependent on the evaluation environment.

DEF variable AS \(cust, env).[ SEND (cust, SELF) TO env ]

# An environment is a collection of bindings.
# The empty environment has no bindings,
# so any attempted lookup yields "undefined".

DEF empty_env AS \(cust, _).[ SEND #? TO cust ]

# A binding is a mapping from a variable to a value.
# A lookup matching the variable yields the value.
# Bindings form an environment delegation chain.

DEF binding(var, value, next) AS \msg.[
    CASE msg OF
    (cust, $var) : [ SEND value TO cust ]
    _ : [ SEND msg TO next ]
    END
]

# Lambda expressions are constructors for applicative functions.
# They capture a _body_ expression and the definition environment,
# creating a closure that may be _applied_ later.

DEF lambda(var, body) AS \(cust, env).[
    SEND NEW closure(env, var, body) TO cust
]

DEF closure(env, var, body) AS \(arg, cust, _).[
    CREATE env' WITH binding(var, arg, env)
    SEND (cust, env') TO body
]

# Application expressions apply a function to the result
# of evaluating a parameter expression.

DEF application(lambda, param) AS \(cust, env).[
    CREATE appl WITH applicative(param, cust, env)
    SEND (appl, env) TO lambda
]

DEF applicative(param, cust, env) AS \closure.[
    BECOME operative(closure, cust, env)
    SEND (SELF, env) TO param
]

DEF operative(closure, cust, env) AS \arg.[
    SEND (arg, cust, env) TO closure
]

#
# Demonstrations
#

CREATE env WITH empty_env

# eval[x, {x:13}] => 13
CREATE var_x WITH variable
CREATE env' WITH binding(var_x, 13, env)
SEND (println, env') TO var_x

# eval[(\x.x)(-77), {}] => -77
CREATE id_lambda WITH lambda(var_x, var_x)
SEND (println, env) TO
    NEW application(id_lambda, NEW constant(-77))

# DEF fn_true AS \cnsq.\altn.cnsq
CREATE cnsq WITH variable
CREATE altn WITH variable
CREATE fn_true
    WITH closure(env, cnsq,
        NEW lambda(altn, cnsq))
# DEF fn_false AS \cnsq.\altn.altn
CREATE fn_false
    WITH closure(env, cnsq,
        NEW lambda(altn, altn))
# DEF fn_if AS \pred.\cnsq.\altn.(pred(cnsq))(altn)
CREATE pred WITH variable
CREATE fn_if
    WITH closure(env, pred,
        NEW lambda(cnsq,
            NEW lambda(altn,
                NEW application(
                    NEW application(pred, cnsq),
                    altn))))
# eval[((if(true))(1))(0), {}] => 1
SEND (println, env) TO
    NEW application(
        NEW application(
            NEW application(
                NEW constant(fn_if),
                NEW constant(fn_true)),  # try `fn_false` here...
            NEW constant(1)),
        NEW constant(0))
