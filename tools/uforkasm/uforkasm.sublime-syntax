%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
# http://www.sublimetext.com/docs/3/scope_naming.html

name: uFork Assembly
file_extensions: [asm]
scope: source.uforkasm
version: 2

# Variables are reusable regex patterns.

variables:
  spaces: ' +'
  string: '"[^"]*"'

# Detects the beginning of a section without consuming any characters. A new
# section begins with a directive, for example .export, or an unindented label.
# The label's name may or may not be quoted.

  section_lookahead: '(?=^[\.\w"])'

# Now for the language grammar, as described in ../../docs/asm.md.

contexts:

# Comments can appear pretty much anywhere.

  comments:
    - match: ( *)((;).*)$
      captures:
        2: comment.line.uforkasm
        3: punctuation.definition.comment.uforkasm

# The imports section comes first.

  imports:
    - include: comments
    - match: '^{{spaces}}(?:(\w+)|({{string}}))(:){{spaces}}({{string}})'
      captures:
        1: entity.name.namespace.uforkasm
        2: string.quoted.double.uforkasm
        3: punctuation.separator.uforkasm
        4: string.quoted.double.uforkasm
    - match: '{{section_lookahead}}'
      pop: true

# Definitions appear between imports and exports.

  definitions:
    - include: comments

# A label, possibly quoted.

    - match: '^(?:(\w+)|({{string}}))(:)'
      captures:
        1: entity.name.label.uforkasm
        2: string.quoted.double.uforkasm
        3: punctuation.separator.uforkasm

# Data operators. These can not follow instruction statements.

    - match: '^{{spaces}}(pair_t|dict_t|type_t|quad_1|quad_2|quad_3|quad_4)\b'
      captures:
        1: storage.type.uforkasm
      push: operand_list

# Terminal operators. It is vital to distinguish these visually, so we use
# the inappropriate scope "variable.language".

    - match: '^{{spaces}}(ref|jump|return)\b'
      captures:
        1: variable.language.uforkasm
      push: operand_list
    - match: '^{{spaces}}(end){{spaces}}(abort|stop|commit)\b'
      captures:
        1: variable.language.uforkasm
        2: keyword.operator.word.uforkasm
      push: operand_list

# Conditional operators.

    - match: '^{{spaces}}(if|if_not)\b'
      captures:
        1: support.function.conditional.uforkasm
      push: operand_list

# Two-part operators.

    - match: '^{{spaces}}(dict){{spaces}}(has|get|add|set|del)\b'
      captures:
        1: keyword.operator.word.uforkasm
        2: keyword.operator.word.uforkasm
      push: operand_list
    - match: '^{{spaces}}(alu){{spaces}}(not|and|or|xor|add|sub|mul|div|lsl|lsr|asr|rol|ror)\b'
      captures:
        1: keyword.operator.word.uforkasm
        2: keyword.operator.word.uforkasm
      push: operand_list
    - match: '^{{spaces}}(cmp){{spaces}}(eq|ge|gt|lt|le|ne)\b'
      captures:
        1: keyword.operator.word.uforkasm
        2: keyword.operator.word.uforkasm
      push: operand_list
    - match: '^{{spaces}}(my){{spaces}}(self|beh|state)\b'
      captures:
        1: keyword.operator.word.uforkasm
        2: keyword.operator.word.uforkasm
      push: operand_list
    - match: '^{{spaces}}(deque){{spaces}}(new|empty|push|pop|put|pull|len)\b'
      captures:
        1: keyword.operator.word.uforkasm
        2: keyword.operator.word.uforkasm
      push: operand_list
    - match: '^{{spaces}}(sponsor){{spaces}}(new|memory|events|cycles|reclaim|start|stop)\b'
      captures:
        1: keyword.operator.word.uforkasm
        2: keyword.operator.word.uforkasm
      push: operand_list

# Other operators.

    - match: '^{{spaces}}(assert|beh|call|debug|drop|dup|eq|msg|new|nth|pair|part|pick|push|quad|roll|send|signal|state|typeq)\b'
      captures:
        1: keyword.operator.word.uforkasm
      push: operand_list
    - match: '{{section_lookahead}}'
      pop: true

# Operators are followed by a whitespace-separated list of operands.

  operand_list:
    - include: comments
    - match: '{{spaces}}'
      push: operand
    - match: '$'
      pop: true
  operand:

# Constants.

    - match: '#(literal_t|fixnum_t|type_t|pair_t|dict_t|instr_t|actor_t|t|f|\?|nil|unit)'
      scope: constant.language.uforkasm

# Based fixnum.

    - match: '\d+(#)[0-9A-Za-z]+'
      scope: constant.numeric.integer.uforkasm
      captures:
        1: punctuation.separator.uforkasm

# Decimal fixnum.

    - match: '-?\d+'
      scope: constant.numeric.integer.uforkasm

# Character fixnum, possibly escaped.

    - match: \'(\\(b|t|n|r|\'|\\)|.)\'
      scope: constant.numeric.integer.other.uforkasm

# Compound name, either part possibly quoted.

    - match: '(?:(\w+)|({{string}}))(\.)(?:(\w+)|({{string}}))'
      captures:
        1: entity.name.namespace.uforkasm
        2: string.quoted.double.uforkasm
        3: punctuation.accessor.uforkasm
        4: variable.other.member.uforkasm
        5: string.quoted.double.uforkasm

# Singular name, possibly quoted.

    - match: '(\w+)|({{string}})'
      captures:
        1: entity.name.label.uforkasm
        2: string.quoted.double.uforkasm

# Any whitespace terminates the operand.

    - match: '(?=\s)'
      pop: true

# Exports. There is no need to pop because nothing can follow the exports.

  exports:
    - include: comments
    - match: '^{{spaces}}(\w+)$'
      captures:
        1: entity.name.label.uforkasm

# There are three distinct sections in a uFork module: the imports, then the
# definitions, then the exports.

  main:
    - include: comments
    - match: ^\.import\b
      scope: support.function.directive.uforkasm
      push: imports
    - match: '^(?:(\w+)|({{string}}))(:)'
      captures:
        1: entity.name.label.uforkasm
        2: string.quoted.double.uforkasm
        3: punctuation.separator.uforkasm
      push: definitions
    - match: '^\.export\b'
      scope: support.function.directive.uforkasm
      push: exports
