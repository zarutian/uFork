/*  CODE    ADR  DISASM                  NAMES                     */
    c27c // 000: BOOT
    002f // 001: FAIL                    PANIC!
    8001 // 002: jump(001)
    521f // 003: (CONST)                 ^C
    0003 // 004: 0x0003
    521f // 005: (CONST)                 '\b'
    0008 // 006: 0x0008
    521f // 007: (CONST)                 '\t'
    0009 // 008: 0x0009
    521f // 009: (CONST)                 '\n'
    000a // 00a: 0x000a
    521f // 00b: (CONST)                 '\r'
    000d // 00c: 0x000d
    521f // 00d: (CONST)                 BL
    0020 // 00e: 0x0020
    521f // 00f: (CONST)                 '0'
    0030 // 010: 0x0030
    521f // 011: (CONST)                 '9'
    0039 // 012: 0x0039
    521f // 013: (CONST)                 A-10
    0037 // 014: 0x0037
    521f // 015: (CONST)                 'A'
    0041 // 016: 0x0041
    521f // 017: (CONST)                 'F'
    0046 // 018: 0x0046
    521f // 019: (CONST)                 'Z'
    005a // 01a: 0x005a
    521f // 01b: (CONST)                 'a'
    0061 // 01c: 0x0061
    521f // 01d: (CONST)                 'f'
    0066 // 01e: 0x0066
    521f // 01f: (CONST)                 'z'
    007a // 020: 0x007a
    521f // 021: (CONST)                 DEL
    007f // 022: 0x007f
    030f // 023: @                       @EXECUTE
    021f // 024: (LIT)                   EXECUTE
    0fff // 025: 0x0fff
    0744 // 026: AND
    2100 // 027: >R
    5000 // 028: NOP EXIT                (EXIT)
    902b // 029: jump_ifzero(02b)        ?:
    0400 // 02a: SWAP
    5100 // 02b: DROP EXIT               (DROP)
    0400 // 02c: SWAP                    NIP
    5100 // 02d: DROP EXIT
    0400 // 02e: SWAP                    TUCK
    5240 // 02f: OVER EXIT
    0240 // 030: OVER                    2DUP
    5240 // 031: OVER EXIT
    0100 // 032: DROP                    2DROP
    5100 // 033: DROP EXIT
    0200 // 034: DUP                     ABS
    0324 // 035: MSB&
    9038 // 036: jump_ifzero(038)
    53c2 // 037: NEGATE EXIT
    903b // 038: jump_ifzero(03b)        BOOL
    02f6 // 039: TRUE
    803c // 03a: jump(03c)
    02c0 // 03b: 0
    5000 // 03c: NOP EXIT
    0745 // 03d: XOR                     =
    9041 // 03e: jump_ifzero(041)        0= NOT
    02c0 // 03f: 0
    8042 // 040: jump(042)
    02f6 // 041: TRUE
    5000 // 042: NOP EXIT
    c03d // 043: =                       <>
    5335 // 044: INVERT EXIT
    03c2 // 045: NEGATE                  0>
    0324 // 046: MSB&                    0<
    8038 // 047: jump(038)
    0400 // 048: SWAP                    >
    0742 // 049: -                       <
    8046 // 04a: jump(046)
    c049 // 04b: <                       >=
    5335 // 04c: INVERT EXIT
    c048 // 04d: >                       <=
    5335 // 04e: INVERT EXIT
    c030 // 04f: 2DUP                    MAX
    c049 // 050: <
    8029 // 051: jump(029)
    c030 // 052: 2DUP                    MIN
    c048 // 053: >
    8029 // 054: jump(029)
    0200 // 055: DUP                     @1+
    030f // 056: @
    0311 // 057: 1+
    0400 // 058: SWAP
    598f // 059: ! EXIT
    0200 // 05a: DUP                     @1-
    030f // 05b: @
    0312 // 05c: 1-
    0400 // 05d: SWAP
    598f // 05e: ! EXIT
    0600 // 05f: -ROT                    INBOUNDS
    0240 // 060: OVER
    0400 // 061: SWAP
    0742 // 062: -
    0600 // 063: -ROT
    0742 // 064: -
    0746 // 065: OR
    0324 // 066: MSB&
    803e // 067: jump(03e)
    c00f // 068: '0'                     ISDIGIT
    c011 // 069: '9'
    805f // 06a: jump(05f)
    0200 // 06b: DUP                     ISHEX
    c015 // 06c: 'A'
    c017 // 06d: 'F'
    c05f // 06e: INBOUNDS
    0240 // 06f: OVER
    c01b // 070: 'a'
    c01d // 071: 'f'
    c05f // 072: INBOUNDS
    0746 // 073: OR
    0400 // 074: SWAP
    c068 // 075: ISDIGIT
    5746 // 076: OR EXIT
    c015 // 077: 'A'                     ISUPPER
    c019 // 078: 'Z'
    805f // 079: jump(05f)
    c01b // 07a: 'a'                     ISLOWER
    c01f // 07b: 'z'
    805f // 07c: jump(05f)
    0200 // 07d: DUP                     TOUPPER
    c07a // 07e: ISLOWER
    9082 // 07f: jump_ifzero(082)
    c00d // 080: BL
    0745 // 081: XOR
    5000 // 082: NOP EXIT
    0200 // 083: DUP                     TOLOWER
    c077 // 084: ISUPPER
    9088 // 085: jump_ifzero(088)
    c00d // 086: BL
    0745 // 087: XOR
    5000 // 088: NOP EXIT
    021f // 089: (LIT)                   TOHEX
    000f // 08a: 0x000f
    0744 // 08b: AND
    0200 // 08c: DUP
    021f // 08d: (LIT)
    000a // 08e: 0x000a
    c049 // 08f: <
    9093 // 090: jump_ifzero(093)
    c00f // 091: '0'
    8094 // 092: jump(094)
    c013 // 093: A-10
    5741 // 094: + EXIT
    c07d // 095: TOUPPER                 FROMHEX
    0200 // 096: DUP
    c015 // 097: 'A'
    c049 // 098: <
    909c // 099: jump_ifzero(09c)
    c00f // 09a: '0'
    809d // 09b: jump(09d)
    c013 // 09c: A-10
    5742 // 09d: - EXIT
    021f // 09e: (LIT)                   TX? EMIT?
    0000 // 09f: NOP
    533f // 0a0: IO@ EXIT
    c00d // 0a1: BL                      SPACE
    c09e // 0a2: TX?                     EMIT
    90a2 // 0a3: jump_ifzero(0a2)
    021f // 0a4: (LIT)                   TX!
    0001 // 0a5: 0x0001
    59bf // 0a6: IO! EXIT
    021f // 0a7: (LIT)                   RX? KEY?
    0002 // 0a8: 0x0002
    533f // 0a9: IO@ EXIT
    c0a7 // 0aa: RX?                     KEY
    90aa // 0ab: jump_ifzero(0aa)
    021f // 0ac: (LIT)                   RX@
    0003 // 0ad: 0x0003
    533f // 0ae: IO@ EXIT
    2100 // 0af: >R                      SPACES
    80b2 // 0b0: jump(0b2)
    c0a1 // 0b1: SPACE
    b0b1 // 0b2: jump_ifnz_dec(0b1)
    5000 // 0b3: NOP EXIT
    c00b // 0b4: '\r'                    CR
    c0a2 // 0b5: EMIT
    c009 // 0b6: '\n'
    80a2 // 0b7: jump(0a2)
    0200 // 0b8: DUP                     ECHO
    c0a2 // 0b9: EMIT
    c00b // 0ba: '\r'
    c03d // 0bb: =
    90bf // 0bc: jump_ifzero(0bf)
    c009 // 0bd: '\n'
    c0a2 // 0be: EMIT
    5000 // 0bf: NOP EXIT
    c089 // 0c0: TOHEX                   X#
    80a2 // 0c1: jump(0a2)
    021f // 0c2: (LIT)                   X.
    0004 // 0c3: 0x0004
    2100 // 0c4: >R
    80c9 // 0c5: jump(0c9)
    0309 // 0c6: 4ROL
    0200 // 0c7: DUP
    c0c0 // 0c8: X#
    b0c6 // 0c9: jump_ifnz_dec(0c6)
    5100 // 0ca: DROP EXIT
    521f // 0cb: (CONST)                 '!'
    0021 // 0cc: 0x0021
    521f // 0cd: (CONST)                 '.'
    002e // 0ce: 0x002e
    521f // 0cf: (CONST)                 '/'
    002f // 0d0: FAIL
    521f // 0d1: (CONST)                 '<'
    003c // 0d2: 0x003c
    521f // 0d3: (CONST)                 '>'
    003e // 0d4: 0x003e
    521f // 0d5: (CONST)                 '?'
    003f // 0d6: 0x003f
    521f // 0d7: (CONST)                 '@'
    0040 // 0d8: 0x0040
    521f // 0d9: (CONST)                 '['
    005b // 0da: 0x005b
    521f // 0db: (CONST)                 ']'
    005d // 0dc: 0x005d
    521f // 0dd: (CONST)                 'p'
    0070 // 0de: 0x0070
    521f // 0df: (CONST)                 'q'
    0071 // 0e0: 0x0071
    521f // 0e1: (CONST)                 'r'
    0072 // 0e2: 0x0072
    521f // 0e3: (CONST)                 '~'
    007e // 0e4: 0x007e
    521f // 0e5: (CONST)                 cmd
    00e7 // 0e6: 0x00e7
    0000 // 0e7: NOP
    521f // 0e8: (CONST)                 inp
    00ea // 0e9: 0x00ea
    0000 // 0ea: NOP
    521f // 0eb: (CONST)                 tos
    00ed // 0ec: 0x00ed
    0000 // 0ed: NOP
    521f // 0ee: (CONST)                 nos
    00f0 // 0ef: 0x00f0
    0000 // 0f0: NOP
    521f // 0f1: (CONST)                 here
    00f3 // 0f2: 0x00f3
    0000 // 0f3: NOP
    c0eb // 0f4: tos                     push
    030f // 0f5: @
    c0ee // 0f6: nos
    098f // 0f7: !
    c0eb // 0f8: tos
    598f // 0f9: ! EXIT
    c0eb // 0fa: tos                     pop
    030f // 0fb: @
    c0ee // 0fc: nos
    030f // 0fd: @
    c0eb // 0fe: tos
    598f // 0ff: ! EXIT
    0200 // 100: DUP                     quad
    0324 // 101: MSB&
    9107 // 102: jump_ifzero(107)
    021f // 103: (LIT)
    0fff // 104: 0x0fff
    0744 // 105: AND
    8116 // 106: jump(116)
    0308 // 107: 2ROL
    0200 // 108: DUP
    0314 // 109: LSB&
    9112 // 10a: jump_ifzero(112)
    021f // 10b: (LIT)
    3ffc // 10c: 0x3ffc
    0744 // 10d: AND
    021f // 10e: (LIT)
    4000 // 10f: 0x4000
    0746 // 110: OR
    8116 // 111: jump(116)
    021f // 112: (LIT)
    7ffc // 113: 0x7ffc
    0744 // 114: AND
    0326 // 115: MSB|
    5000 // 116: NOP EXIT
    0200 // 117: DUP                     parse_qaddr
    021f // 118: (LIT)
    0003 // 119: 0x0003
    0744 // 11a: AND
    0400 // 11b: SWAP
    0200 // 11c: DUP
    0324 // 11d: MSB&
    9124 // 11e: jump_ifzero(124)
    030c // 11f: 2ASR
    021f // 120: (LIT)
    1fff // 121: 0x1fff
    0744 // 122: AND
    812b // 123: jump(12b)
    030c // 124: 2ASR
    021f // 125: (LIT)
    0fff // 126: 0x0fff
    0744 // 127: AND
    021f // 128: (LIT)
    4000 // 129: 0x4000
    0746 // 12a: OR
    5000 // 12b: NOP EXIT
    0200 // 12c: DUP                     fetch
    021f // 12d: (LIT)
    c000 // 12e: call(000)
    0744 // 12f: AND
    914a // 130: jump_ifzero(14a)
    c117 // 131: parse_qaddr
    0240 // 132: OVER
    021f // 133: (LIT)
    0001 // 134: 0x0001
    c03d // 135: =
    9139 // 136: jump_ifzero(139)
    035f // 137: QX@
    8148 // 138: jump(148)
    0240 // 139: OVER
    021f // 13a: (LIT)
    0002 // 13b: 0x0002
    c03d // 13c: =
    9140 // 13d: jump_ifzero(140)
    036f // 13e: QY@
    8148 // 13f: jump(148)
    0240 // 140: OVER
    021f // 141: (LIT)
    0003 // 142: 0x0003
    c03d // 143: =
    9147 // 144: jump_ifzero(147)
    037f // 145: QZ@
    8148 // 146: jump(148)
    034f // 147: QT@
    c02c // 148: NIP
    814b // 149: jump(14b)
    030f // 14a: @
    5000 // 14b: NOP EXIT
    0200 // 14c: DUP                     store
    021f // 14d: (LIT)
    c000 // 14e: call(000)
    0744 // 14f: AND
    916e // 150: jump_ifzero(16e)
    c117 // 151: parse_qaddr
    0400 // 152: SWAP
    0200 // 153: DUP
    021f // 154: (LIT)
    0001 // 155: 0x0001
    c03d // 156: =
    915b // 157: jump_ifzero(15b)
    0100 // 158: DROP
    09df // 159: QX!
    816d // 15a: jump(16d)
    0200 // 15b: DUP
    021f // 15c: (LIT)
    0002 // 15d: 0x0002
    c03d // 15e: =
    9163 // 15f: jump_ifzero(163)
    0100 // 160: DROP
    09ef // 161: QY!
    816d // 162: jump(16d)
    0200 // 163: DUP
    021f // 164: (LIT)
    0003 // 165: 0x0003
    c03d // 166: =
    916b // 167: jump_ifzero(16b)
    0100 // 168: DROP
    09ff // 169: QZ!
    816d // 16a: jump(16d)
    0100 // 16b: DROP
    09cf // 16c: QT!
    816f // 16d: jump(16f)
    098f // 16e: !
    5000 // 16f: NOP EXIT
    0240 // 170: OVER                    dump
    0742 // 171: -
    0200 // 172: DUP
    c046 // 173: 0<
    9177 // 174: jump_ifzero(177)
    c032 // 175: 2DROP
    8189 // 176: jump(189)
    0311 // 177: 1+
    2100 // 178: >R
    8186 // 179: jump(186)
    0200 // 17a: DUP
    c12c // 17b: fetch
    0240 // 17c: OVER
    021f // 17d: (LIT)
    0007 // 17e: 0x0007
    0744 // 17f: AND
    9183 // 180: jump_ifzero(183)
    c0a1 // 181: SPACE
    8184 // 182: jump(184)
    c0b4 // 183: CR
    c0c2 // 184: X.
    0311 // 185: 1+
    b17a // 186: jump_ifnz_dec(17a)
    c0b4 // 187: CR
    0100 // 188: DROP
    5000 // 189: NOP EXIT
    c095 // 18a: FROMHEX                 >inp
    c0e8 // 18b: inp
    030f // 18c: @
    0309 // 18d: 4ROL
    021f // 18e: (LIT)
    fff0 // 18f: call_ifnz_dec(ff0)
    0744 // 190: AND
    0746 // 191: OR
    c0e8 // 192: inp
    598f // 193: ! EXIT
    c0f1 // 194: here                    >here
    030f // 195: @
    c14c // 196: store
    c0f1 // 197: here
    8055 // 198: jump(055)
    c0d3 // 199: '>'                     prompt
    c0a2 // 19a: EMIT
    c00d // 19b: BL
    80a2 // 19c: jump(0a2)
    c0e5 // 19d: cmd                     del
    030f // 19e: @
    0200 // 19f: DUP
    c00d // 1a0: BL
    c048 // 1a1: >
    91c0 // 1a2: jump_ifzero(1c0)
    0200 // 1a3: DUP
    c06b // 1a4: ISHEX
    91b7 // 1a5: jump_ifzero(1b7)
    c0e8 // 1a6: inp
    030f // 1a7: @
    030d // 1a8: 4ASR
    021f // 1a9: (LIT)
    0fff // 1aa: 0x0fff
    0744 // 1ab: AND
    0200 // 1ac: DUP
    91b1 // 1ad: jump_ifzero(1b1)
    0200 // 1ae: DUP
    c089 // 1af: TOHEX
    81b2 // 1b0: jump(1b2)
    c00d // 1b1: BL
    c0e5 // 1b2: cmd
    098f // 1b3: !
    c0e8 // 1b4: inp
    098f // 1b5: !
    81ba // 1b6: jump(1ba)
    c00d // 1b7: BL
    c0e5 // 1b8: cmd
    098f // 1b9: !
    c005 // 1ba: '\b'
    c0a2 // 1bb: EMIT
    c00d // 1bc: BL
    c0a2 // 1bd: EMIT
    c005 // 1be: '\b'
    c0a2 // 1bf: EMIT
    5100 // 1c0: DROP EXIT
    c0a2 // 1c1: EMIT                    eol
    c0aa // 1c2: KEY
    0200 // 1c3: DUP
    c00b // 1c4: '\r'
    c03d // 1c5: =
    91c8 // 1c6: jump_ifzero(1c8)
    5000 // 1c7: NOP EXIT
    81c1 // 1c8: jump(1c1)
    c032 // 1c9: 2DROP                   upload
    c0aa // 1ca: KEY
    0200 // 1cb: DUP
    c0cf // 1cc: '/'
    0745 // 1cd: XOR
    d1c1 // 1ce: call_ifzero(1c1)
    c0e5 // 1cf: cmd
    030f // 1d0: @
    0400 // 1d1: SWAP
    0200 // 1d2: DUP
    c00d // 1d3: BL
    c04d // 1d4: <=
    91f4 // 1d5: jump_ifzero(1f4)
    0240 // 1d6: OVER
    c06b // 1d7: ISHEX
    91e5 // 1d8: jump_ifzero(1e5)
    c0f1 // 1d9: here
    030f // 1da: @
    021f // 1db: (LIT)
    000f // 1dc: 0x000f
    0744 // 1dd: AND
    c03e // 1de: 0=
    91e2 // 1df: jump_ifzero(1e2)
    c0e3 // 1e0: '~'
    c0a2 // 1e1: EMIT
    c0e8 // 1e2: inp
    030f // 1e3: @
    c194 // 1e4: >here
    0240 // 1e5: OVER
    c0db // 1e6: ']'
    c03d // 1e7: =
    91f1 // 1e8: jump_ifzero(1f1)
    c0f1 // 1e9: here
    030f // 1ea: @
    c0f4 // 1eb: push
    c0db // 1ec: ']'
    c0a2 // 1ed: EMIT
    0200 // 1ee: DUP
    c0b8 // 1ef: ECHO
    5000 // 1f0: NOP EXIT
    02c0 // 1f1: 0
    c0e8 // 1f2: inp
    098f // 1f3: !
    0200 // 1f4: DUP
    c06b // 1f5: ISHEX
    91f9 // 1f6: jump_ifzero(1f9)
    0200 // 1f7: DUP
    c18a // 1f8: >inp
    0200 // 1f9: DUP
    c0e5 // 1fa: cmd
    098f // 1fb: !
    81c9 // 1fc: jump(1c9)
    c0aa // 1fd: KEY                     MONITOR
    0200 // 1fe: DUP
    c003 // 1ff: ^C
    c03d // 200: =
    9203 // 201: jump_ifzero(203)
    5000 // 202: NOP EXIT
    0200 // 203: DUP
    c005 // 204: '\b'
    c03d // 205: =
    9209 // 206: jump_ifzero(209)
    0100 // 207: DROP
    c021 // 208: DEL
    0200 // 209: DUP
    c021 // 20a: DEL
    0745 // 20b: XOR
    d19d // 20c: call_ifzero(19d)
    0200 // 20d: DUP
    c0cf // 20e: '/'
    0745 // 20f: XOR
    d1c1 // 210: call_ifzero(1c1)
    0200 // 211: DUP
    c0b8 // 212: ECHO
    c0e5 // 213: cmd
    030f // 214: @
    0400 // 215: SWAP
    0200 // 216: DUP
    c00d // 217: BL
    c04d // 218: <=
    9264 // 219: jump_ifzero(264)
    0240 // 21a: OVER
    c06b // 21b: ISHEX
    9220 // 21c: jump_ifzero(220)
    c0e8 // 21d: inp
    030f // 21e: @
    c0f4 // 21f: push
    0240 // 220: OVER
    c0d7 // 221: '@'
    c03d // 222: =
    9227 // 223: jump_ifzero(227)
    c0fa // 224: pop
    c12c // 225: fetch
    c0f4 // 226: push
    0240 // 227: OVER
    c0cd // 228: '.'
    c03d // 229: =
    922e // 22a: jump_ifzero(22e)
    c0fa // 22b: pop
    c0c2 // 22c: X.
    c0b4 // 22d: CR
    0240 // 22e: OVER
    c0cb // 22f: '!'
    c03d // 230: =
    9236 // 231: jump_ifzero(236)
    c0fa // 232: pop
    c0fa // 233: pop
    0400 // 234: SWAP
    c14c // 235: store
    0240 // 236: OVER
    c0df // 237: 'q'
    c03d // 238: =
    923d // 239: jump_ifzero(23d)
    c0fa // 23a: pop
    c100 // 23b: quad
    c0f4 // 23c: push
    0240 // 23d: OVER
    c0dd // 23e: 'p'
    c03d // 23f: =
    9246 // 240: jump_ifzero(246)
    c0fa // 241: pop
    c117 // 242: parse_qaddr
    0400 // 243: SWAP
    c0f4 // 244: push
    c0f4 // 245: push
    0240 // 246: OVER
    c0d5 // 247: '?'
    c03d // 248: =
    924e // 249: jump_ifzero(24e)
    c0fa // 24a: pop
    c0fa // 24b: pop
    0400 // 24c: SWAP
    c170 // 24d: dump
    0240 // 24e: OVER
    c0d9 // 24f: '['
    c03d // 250: =
    9256 // 251: jump_ifzero(256)
    c0fa // 252: pop
    c0f1 // 253: here
    098f // 254: !
    c1c9 // 255: upload
    0240 // 256: OVER
    c0e1 // 257: 'r'
    c03d // 258: =
    925c // 259: jump_ifzero(25c)
    c0fa // 25a: pop
    c024 // 25b: EXECUTE
    02c0 // 25c: 0
    c0e8 // 25d: inp
    098f // 25e: !
    0200 // 25f: DUP
    c00b // 260: '\r'
    c03d // 261: =
    9264 // 262: jump_ifzero(264)
    c199 // 263: prompt
    0200 // 264: DUP
    c06b // 265: ISHEX
    9269 // 266: jump_ifzero(269)
    0200 // 267: DUP
    c18a // 268: >inp
    0200 // 269: DUP
    c021 // 26a: DEL
    c03d // 26b: =
    926f // 26c: jump_ifzero(26f)
    c032 // 26d: 2DROP
    8272 // 26e: jump(272)
    c02c // 26f: NIP
    c0e5 // 270: cmd
    098f // 271: !
    81fd // 272: jump(1fd)
    c0aa // 273: KEY                     ECHOLOOP
    0200 // 274: DUP
    c0c2 // 275: X.
    c0b4 // 276: CR
    c003 // 277: ^C
    c03d // 278: =
    927b // 279: jump_ifzero(27b)
    5000 // 27a: NOP EXIT
    8273 // 27b: jump(273)
    c273 // 27c: ECHOLOOP                BOOT
    c199 // 27d: prompt
    81fd // 27e: jump(1fd)
